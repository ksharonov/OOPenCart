<?php
/**
 * Created by PhpStorm.
 * User: aleksey
 * Date: 17.05.2018
 * Time: 11:26
 */

namespace app\modules\lexema\api\db;


use app\helpers\ModelRelationHelper;
use app\models\db\Address;
use app\models\db\City;
use app\models\db\Storage;
use app\models\db\StorageBalance;
use app\modules\lexema\api\base\Mapper;
use app\modules\lexema\api\repository\ProductRepository;
use app\modules\lexema\api\repository\ShopRepository;
use app\modules\lexema\api\repository\StorageRepository;
use app\system\db\ActiveRecord;

/**
 * Class LexemaStorageBalance
 * @package app\modules\lexema\api\db
 */
class LexemaStorageBalance extends StorageBalance
{
	use Mapper;

	/** @var ActiveRecord */
	public static $currentProduct;

	public $label = 'Баланс товара';
	public $labelAttribute = 'productTitle';

	public $productTitle;

	public $key1;
	public $key2;

	public $map = [
		'materialGlobalId' => 'setProduct',
		'StorageGlobalId' => 'setStorage',
		'EdizmglobalId' => null,
		'Ost' => 'quantity',
		'key1' => 'key1',
		'key2' => 'key2',
	];

	public static function setCurrentProduct(ActiveRecord $product)
	{
		self::$currentProduct = $product;
	}

	public function rules()
	{
		return [
			[['productId', 'storageId'], 'unique', 'targetAttribute' => ['productId', 'storageId']],
			[['productId', 'storageId'], 'required'],
		];
	}

	public function setProduct($key, $value)
	{
		if (!$value) {
			return;
		}

		if (self::$currentProduct) {
			$this->productId = self::$currentProduct->id;
			$this->productTitle = self::$currentProduct->title;
			return;
		}

		$dbProduct = LexemaProduct::findByGuid($value);

		if (!$dbProduct) {
			$apiProduct = ProductRepository::get()
				->find(['globalId' => $value])
				->one();

			if ($apiProduct) {
				$dbProduct = new LexemaProduct($apiProduct);
				$dbProduct->save(false);
			}
		}

		if (isset($dbProduct->id)) {
			$this->productId = $dbProduct->id;
			$this->productTitle = $dbProduct->title;
		}
	}

	public function setStorage($key, $value)
	{
		if (!$value) {
			return;
		}

		$dbStorage = LexemaStorage::findByGuid($value);

		if (!$dbStorage) {
			$apiStorage = StorageRepository::get()
				->find(['globalId' => $value])
				->one();

			//dump($apiStorage);exit;

			if ($apiStorage) {
				$dbStorage = new LexemaStorage($apiStorage);
				$dbStorage->save(false);
			}
		}

		if (isset($dbStorage->id)) {
			$this->storageId = $dbStorage->id;
		}
	}

	public function beforeSave( $insert )
	{
		$this->state = StorageBalance::STATE_IN_STOCK;
		return parent::beforeSave($insert); // TODO: Change the autogenerated stub
	}

	public function afterSave( $insert, $changedAttributes )
	{
		parent::afterSave($insert, $changedAttributes);
	}
}