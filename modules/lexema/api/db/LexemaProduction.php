<?php
/**
 * Created by PhpStorm.
 * User: aleksey
 * Date: 17.05.2018
 * Time: 11:26
 */

namespace app\modules\lexema\api\db;


use app\helpers\StringHelper;
use app\models\db\Manufacturer;
use app\models\db\Product;
use app\models\db\ProductCategory;
use app\models\db\ProductPrice;
use app\models\db\ProductPriceGroup;
use app\models\db\ProductToCategory;
use app\models\db\ProductUnit;
use app\models\db\Setting;
use app\models\db\Unit;
use app\modules\lexema\api\base\Mapper;

class LexemaProduction extends Product
{
	use Mapper;

	public $label = 'Товар поставщика';
	public $labelAttribute = 'title';

	/** @var ProductCategory $_category */
	public $_category;

	/** @var Unit $_unit */
	protected $_unit;

	/** @var float $_price */
	protected $dbPrice;

	/** @var boolean $saved */
	protected $saved;

	public $map = [
		'vcode' => 'setBackCode',
		'distributorGuid' => 'setManufacturer',
		'distributor' => null,
		'distributorName' => null,
		'Folder' => 'setCategory',
		'artikul' => 'vendorCode',
		'Fname' => 'settitle',
		'edizm' => 'setDbUnit',
		'uzena'=> 'dbPrice',
	];

	public function rules()
	{
		return [
			[['_category', 'backCode', 'guid'], 'required'],
		];
	}

	public function setBackCode($key, $value)
	{
		if (!$value) {
			return;
		}

		$this->backCode = $value;
		$this->guid = (string)$value;
	}

	public function setTitle($key, $value)
	{
		$this->title = trim($value);
		$this->status = Product::STATUS_PUBLISHED;
	}

	public function setCategory($key, $value)
	{
		if ($value === null) {
			return;
		}

		$dbCategory = ProductCategory::findByGuid($value);

		if ($dbCategory) {
			$this->_category = $dbCategory;
		}
	}

	public function setManufacturer($key, $value)
	{
		if ($value === null) {
			return;
		}

		$dbManufacturer = Manufacturer::findByGuid($value);

		if ($dbManufacturer) {
			$this->manufacturerId = $dbManufacturer->id;
		}
	}

	public function setDbUnit($key, $value)
	{
		if (!$value) {
			return;
		}

		$dbUnit = Unit::find()
			->where(['title' => $value])
			->one();

		if (!$dbUnit) {
			$dbUnit = new Unit();
			$dbUnit->title = $value;
			$dbUnit->save();
		}

		$this->_unit = $dbUnit;
	}

	public function setDbPrice()
	{
		$wholesaleId = Setting::get('WHOLESALE.PRICE.ID');
		$wholesalePriceGroup = ProductPriceGroup::find()
			->where(['id' => $wholesaleId])
			->one();

		if ($this->dbPrice) {
			$dbProductPrice = ProductPrice::find()
				->where(['productId' => $this->id])
				->andWhere(['productPriceGroupId' => $wholesalePriceGroup->id])
				->one();

			if ($dbProductPrice) {
				$dbProductPrice->value = $this->dbPrice;
				$dbProductPrice->save();
			} else {
				$dbProductPrice = new ProductPrice();
				$dbProductPrice->productId = $this->id;
				$dbProductPrice->productPriceGroupId = $wholesalePriceGroup->id;
				$dbProductPrice->value = $this->dbPrice;
				$dbProductPrice->save();
			}
		}
	}

	public function afterSave( $insert, $changedAttributes )
	{
		if ($this->saved) {
			return;
		}

		if ($this->_category) {
			$link = ProductToCategory::find()
				->where(['productId' => $this->id])
				->andWhere(['categoryId' => $this->_category->id])
				->one();

			if (!$link) {
				$this->link('categories', $this->_category);
			}
		}

		if ($this->dbPrice) {
			$this->setDbPrice();
		}

		if ($this->_unit) {
			$link = ProductUnit::find()
				->where(['productId' => $this->id])
				->andWhere(['unitId' => $this->_unit->id])
				->one();

			if (!$link) {
				$link = new ProductUnit();
				$link->productId = $this->id;
				$link->unitId = $this->_unit->id;
				$link->rate = 1;
				$link->save();
			}
		}

		if (!$this->slug) {
			$this->slug = $this->id . '_' . StringHelper::translit($this->title);
			$this->saved = true;
			$this->save(false);
		}

		$this->output($insert, $changedAttributes);

		parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
	}

}