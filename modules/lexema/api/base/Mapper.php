<?php
/**
 * Created by PhpStorm.
 * User: aleksey
 * Date: 17.05.2018
 * Time: 17:28
 */

namespace app\modules\lexema\api\base;

use app\helpers\ModelRelationHelper;
use app\models\db\OuterRel;
use app\system\db\ActiveRecord;

trait Mapper
{

	public $fromRemote;

	/**
	 * @override
	 * Mapper constructor.
	 * @param $data
	 * @throws \Exception
	 */
	public function __construct($data = null)
	{
		$this->fromRemote = true;

		if ($data) {
			$this->loadFromRemote($data);
		}

		parent::__construct();
	}

	/** @Override
	 * Переопределенный метод поиска по гуиду
	 * @param string $guid
	 * @param bool $onlyCheck
	 * @return Mapper|ActiveRecord|bool
	 * @throws \ReflectionException
	 */
	public static function findByGuid(string $guid, bool $onlyCheck = false)
	{
		$relModel = self::getRelModel();

		$method = array_search($relModel, ModelRelationHelper::$model);

		if ($method) {
			$method = lcfirst($method);
		}

		$outerRelModel = OuterRel::find()
			->where(['relModel' => $relModel])
			->andWhere(['guid' => $guid])
                        ->limit(1)
			->one();

		if (!$outerRelModel) {
			return false;
		}

		/** @var ActiveRecord $model */
		$model = self::findOne($outerRelModel->relModelId);
		$model->guid = $guid;

		return $model;
	}

	/**
	 * @override
	 * Переопределил из ActiveRecord
	 * для linkGuid()
	 * @return null
	 * @throws \ReflectionException
	 */
	public static function getRelModel()
	{
		$className = parent::class;
		$reflection = new \ReflectionClass($className);
		$modelName = $reflection->getShortName();
		$relModel = ModelRelationHelper::$model[$modelName] ?? null;

		return $relModel;
	}

	/**
	 * Маппинг
	 * @param $data
	 * @throws \Exception
	 */
	public function loadFromRemote($data)
	{
		foreach ($data as $key => $value) {
			if (isset($this->map[$key])) {
				$attribute = $this->map[$key];

				if (method_exists($this, $attribute)) {
					$this->$attribute($key, $value);
					continue;
				}

				if (!$this->hasProperty($attribute)) {
					throw new \Exception('У класса "' . self::className() . '" нет аттрибута "' . $attribute . '"');
				}

				$this->$attribute = $value;
			}
		}
	}

	/**
	 * Вывод сообщений
	 * @param $insert
	 * @param $changedAttributes
	 */
	public function output($insert, $changedAttributes)
	{
		$attr = $this->labelAttribute;

		// если есть обновленные аттрибуты
		if ($changedAttributes && !$insert) {
			echo "Обновление: " . $this->label . ' "' . $this->$attr . '"' . PHP_EOL;//'"<br>';
			//dump($changedAttributes);
		}

		// если без изменений
		if (!$changedAttributes && !$insert) {
			echo "Без изменений: " . $this->label . ' "' . $this->$attr . '"' . PHP_EOL;//'"<br>';
		}

		// новая запись
		if ($insert) {
			echo "Добавлено: " . $this->label . ' "' . $this->$attr . '"' . PHP_EOL;//'"<br>';
		}

		flush();
	}

	public function afterSave( $insert, $changedAttributes )
	{
		$this->output($insert, $changedAttributes);

		parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
	}
}