<?php

namespace app\controllers;

use app\models\base\post\Vacancy;
use app\models\db\Address;
use app\models\db\CityOnSite;
use app\models\db\File;
use app\models\db\Post;
use app\models\db\ProductAttribute;
use app\models\db\ProductToAttribute;
use app\models\db\Storage;
use app\models\form\VacancyForm;
use app\models\OneC\CashierTimeOneC;
use app\models\OneC\CheckStatusOrdersOneC;
use app\models\OneC\ImageOneC;
use app\models\OneC\LoadInfoOneC;
use app\models\OneC\ProductAttributeOneC;
use app\models\OneC\ProductCategory;
use app\models\OneC\ProductToAttributeOneC;
use app\models\OneC\StorageBalanceOneC;
use app\models\OneC\StorageOneC;
use app\models\OneC\TerminalOneC;
use app\models\search\ManufacturerSearch;
use app\models\search\PostSearch;
use app\system\base\OneCLoader;
use app\system\template\TemplateStore;
use function GuzzleHttp\Psr7\build_query;
use Yii;
use yii\db\Query;
use yii\web\Response;
use app\helpers\ModelRelationHelper;
use app\models\db\Client;
use app\models\db\Manufacturer;
use app\models\db\OuterRel;
use yii\filters\AccessControl;
use yii\filters\VerbFilter;
use app\models\form\ContactForm;
use app\models\db\User;
use app\helpers\ImportHelper;
use app\models\db\Product;
use app\models\OneC\ProductOneC;
use app\models\OneC\ProductPriceGroupOneC;
use app\models\OneC\ProductPriceOneC;
use app\models\OneC\ProductCategoryOneC;
use app\models\OneC\ClientOneC;
use app\models\OneC\TestConnectOneC;
use app\models\OneC\OrderClientOneC;
use app\system\base\Controller;
use app\models\OneC\VendorCodeOneC;

/**
 * Class SiteController
 *
 * Страницы сайта
 *
 * @package app\controllers
 */
class SiteController extends Controller
{

    /**
     * @inheritdoc
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
            'captcha' => [
                'class' => 'yii\captcha\CaptchaAction',
                'fixedVerifyCode' => YII_ENV_TEST ? 'testme' : null,
            ],
        ];
    }

    public function beforeAction($action)
    {
        switch ($action->id) {
            case 'error': {
                TemplateStore::setVar("CONTAINER.LAYOUT.SITE.CLASS", 'container-fluid');
                break;
            }
            default: {
                TemplateStore::setVar("CONTAINER.LAYOUT.SITE.CLASS", 'container');
                break;
            }
        }

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * Главная страница
     *
     * @return string
     */
    public function actionIndex()
    {
        return $this->render('index');
    }

    /**
     * Страница "Обратная связь"
     * @return string|Response
     */
    public function actionContact()
    {
        $model = new ContactForm();
        if ($model->load(Yii::$app->request->post()) && $model->contact(Yii::$app->params['adminEmail'])) {
            Yii::$app->session->setFlash('contactFormSubmitted');
            
            //exit();

            return $this->refresh();
        }
        
        //print_r($model->getErrors());
        
        return $this->render('contact', [
            'model' => $model,
        ]);

    }

    /**
     * Страница "О Компании"
     * @return string
     */
    public function actionAbout()
    {
        return $this->render('about');
    }

    /**
     * Страница "Вакансии"
     */
    public function actionVacancies($id = null)
    {
        $searchModel = new PostSearch();
        $searchModel->type = Post::TYPE_VACANCY;
        $dataProvider = $searchModel->search([]);

        $model = null;

        if ($id !== null) {
            $model = Vacancy::findOne($id);
        }

        if (Yii::$app->request->isPost) {
            $params = Yii::$app->request->post();
            $vacancyForm = new VacancyForm();
            $vacancyForm->load(['VacancyForm' => $params]);
            $vacancyForm->send();
        }

        return $this->render('vacancies', [
            'dataProvider' => $dataProvider,
            'searchModel' => $searchModel,
            'model' => $model
        ]);
    }

    /**
     * Страница "Производство"
     */
    public function actionProduction()
    {
        return $this->render('production');
    }

    /**
     * Страница "Новости"
     */
    public function actionNews($slug = null)
    {
        if ($slug) {
            $model = Post::findOne(['slug' => $slug]);

            if (!$model) {
                return $this->redirect('/news');
            }

            return $this->render('news/single', [
                'model' => $model
            ]);
        } else {
            $searchModel = new PostSearch();
            $searchModel->type = Post::TYPE_NEWS;
            $dataProvider = $searchModel->search([]);

            return $this->render('news/list', [
                'dataProvider' => $dataProvider,
                'searchModel' => $searchModel
            ]);
        }
    }

    /**
     * Страница "Обзоры"
     */
    public function actionReviews($slug = null)
    {
        if ($slug) {
            $model = Post::findOne(['slug' => $slug]);

            if (!$model) {
                return $this->redirect('/reviews');
            }

            return $this->render('reviews/single', [
                'model' => $model
            ]);
        } else {
            $searchModel = new PostSearch();
            $searchModel->type = Post::TYPE_REVIEWS;
            $dataProvider = $searchModel->search([]);

            return $this->render('reviews/list', [
                'dataProvider' => $dataProvider,
                'searchModel' => $searchModel
            ]);
        }

    }

    /**
     * Страницы "Магазины"
     */
    public function actionShops()
    {
        $cities = CityOnSite::find()
            ->with('shops')
            ->all();

        return $this->render('shops', [
            'cities' => $cities
        ]);
    }


    public function actionImport()
    {


    }


    /*
     * Страница "Доставка"
     * TODO: Сделать редактируемым текст
     */
    public function actionDelivery()
    {
        return $this->render('delivery');
    }
}
