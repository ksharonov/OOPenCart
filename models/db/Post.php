<?php

namespace app\models\db;

use app\models\traits\FileTrait;
use Yii;
use yii\db\ActiveQuery;
use yii\behaviors\TimestampBehavior;
use yii\db\Expression;
use app\helpers\ModelRelationHelper;

/**
 * This is the model class for table "posts".
 *
 * @property integer $id
 * @property string $title
 * @property string $content
 * @property string $dtUpdate
 * @property string $dtCreate
 * @property string $thumbnail
 * @property integer $status
 * @property integer $categoryId
 * @property integer $type
 * @property PostCategory $category
 * @property string $shortContent
 * @property string $slug
 * @property string $params
 * @property User $user
 * @static string[] $postStatuses
 */
class Post extends \app\system\db\ActiveRecord
{
    use FileTrait;

    const TYPE_NEWS = 0;
    const TYPE_REVIEWS = 1;
    const TYPE_VACANCY = 2;
    const TYPE_REVIEW_COMPANY = 3;

    const POST_HIDDEN = 0;
    const POST_PUBLISHED = 1;

    /** @var array типы постов */
    public static $types = [
        self::TYPE_NEWS => 'Новости',
        self::TYPE_REVIEWS => 'Обзоры',
        self::TYPE_VACANCY => 'Вакансии',
        self::TYPE_REVIEW_COMPANY => 'Отзывы о компании'
    ];

    /** @var array статусы поста */
    public static $postStatuses = [
        self::POST_HIDDEN => 'Скрыт',
        self::POST_PUBLISHED => 'Опубликован'
    ];

    /**
     * @var array кастомные поля
     */
    public $paramsData = [];

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'post';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => 'dtCreate',
                'updatedAtAttribute' => 'dtUpdate',
                'value' => new Expression('NOW()'),
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['title'], 'required'],
            [['dtCreate', 'dtCreate', 'params'], 'safe'],
            [['status', 'categoryId', 'type'], 'integer'],
            [['content'], 'string'],
            [['title'], 'string', 'max' => 255],
            [['thumbnail'], 'string'],
            [['slug'], 'slugValidator']
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Заголовок',
            'content' => 'Контент',
            'dtCreate' => 'Дата создания',
            'dtUpdate' => 'Дата обновления',
            'status' => 'Статус',
            'category' => 'Категория',
            'categoryId' => 'Категория',
            'thumbnail' => 'Изображение',
            'slug' => 'Название ссылки',
            'type' => 'Тип поста',
            'params' => 'Параметры',
            'userId' => 'Пользователь'
        ];
    }

    public function beforeSave($insert)
    {
        if ($this->isNewRecord) {
            $this->status = self::POST_HIDDEN;
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * Валидатор поля slug
     */
    public function slugValidator($attribute)
    {
        if (!preg_match("/[[^a-z,A-Z]/", $this->$attribute)) {
            $this->addError($attribute, 'Поле должно быть на английском языке');
        }
    }

    /**
     * @inheritdoc
     */
    public function beforeDelete()
    {

        Seo::deleteAll([
            'relModel' => ModelRelationHelper::REL_MODEL_POST,
            'relModelId' => $this->id
        ]);

        return parent::beforeDelete();
    }

    /**
     * Получить короткий вариант текста
     */
    public function getShortContent()
    {
        return mb_substr($this->content, 0, 50, 'utf-8') . "...";
    }

    /**
     *
     */
    public function getDt()
    {
        $dtCreate = \DateTime::createFromFormat('Y-m-d H:i:s', $this->dtCreate);
        return $dtCreate->format('d.m.Y');
    }

    /**
     * Возвращает категорию этого поста
     *
     * @return ActiveQuery
     */
    public function getCategory()
    {
        return $this->hasOne(PostCategory::className(), ['id' => 'categoryId']);
    }

    /**
     * Пользователь
     *
     * @return ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(User::class, ['id' => 'userId']);
    }

    /**
     * Возвращает SEO-модель поста
     *
     * @return ActiveQuery
     */
    public function getSeo()
    {
        return $this->hasOne(Seo::className(), ['relModelId' => 'id'])
            ->where([
                'relModel' => ModelRelationHelper::REL_MODEL_POST
            ]);
    }

    /**
     * @return string
     */
    public function getLink()
    {
        $path = ($this->type == self::TYPE_NEWS) ? 'news' : 'reviews';
        return Yii::$app->urlManager->createAbsoluteUrl(["/$path/" . $this->slug . '/']);
    }
}
