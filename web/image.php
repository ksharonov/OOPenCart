<?php
$экземплярОбрезателя = new Обрезатель3000($_GET["imagepath"] ?? null);
//exit();
class Обрезатель3000
{
    /**
     * Массив разрешенный размеров. Не важно от высоты он, или ширины
     * @var array
     */
    const РАЗРЕШЕНЫЕ_РАЗМЕРЫ           = [80, 150, 600, 1024];
    const ШАБЛОН_РЕГУЛЯРНОГО_ВЫРАЖЕНИЯ = '/resize\/([h|w]+)([\d]+)\//i';
    const КОРЕНЬ_ИЗОБРАЖЕНИЙ           = './';
    const КАЧЕСТВО                     = 80;

    private $запрашиваемоеИзображение = null;
    private $изображениеОригиналФайл  = null;

    /**
     * Сторона требуемого размера. h - высота, w - ширина
     * @var char
     */
    private $сторонаРазмера    = "h"; //h - высота или w - ширина
    private $значениеРазмера   = 0;
    private $форматИзображения = null;

    /**
     * Конструктор класса.
     * @param type $_запрашиваемоеИзображение Путь к предполагаемому файлу. Указывается вместе с нужным форматом
     */
    public function __construct($_запрашиваемоеИзображение)
    {

        $this->запрашиваемоеИзображение = $_запрашиваемоеИзображение;
        $this->разборПоШаблону();
        $this->установкаОригиналаФайла();

        $сцылкаНаРесурсИзображения = $this->режь(
            self::КОРЕНЬ_ИЗОБРАЖЕНИЙ.$this->изображениеОригиналФайл, $this->сторонаРазмера == "w" ? $this->значениеРазмера : 0,
            $this->сторонаРазмера == "h" ? $this->значениеРазмера : 0);
        $this->сохраниПокажи($сцылкаНаРесурсИзображения);
    }

    /**
     * Сохраняет и выводит заголовок + картинку
     * @param type $сцылкаНаРесурсИзображения
     */
    function сохраниПокажи($сцылкаНаРесурсИзображения)
    {


       // echo self::КОРЕНЬ_ИЗОБРАЖЕНИЙ.$this->запрашиваемоеИзображение;
      //  exit();

        if (!file_exists(dirname(self::КОРЕНЬ_ИЗОБРАЖЕНИЙ.$this->запрашиваемоеИзображение))) {
            mkdir(dirname(self::КОРЕНЬ_ИЗОБРАЖЕНИЙ.$this->запрашиваемоеИзображение), "0777", true);
        }

        if ($this->форматИзображения == IMAGETYPE_JPEG) {
            header('Content-Type: image/jpeg');
            imagejpeg($сцылкаНаРесурсИзображения, self::КОРЕНЬ_ИЗОБРАЖЕНИЙ.$this->запрашиваемоеИзображение);
            imagejpeg($сцылкаНаРесурсИзображения);
        } elseif ($this->форматИзображения == IMAGETYPE_GIF) {
            header('Content-Type: image/gif');
            imagegif($сцылкаНаРесурсИзображения, self::КОРЕНЬ_ИЗОБРАЖЕНИЙ.$this->запрашиваемоеИзображение);
            imagegif($сцылкаНаРесурсИзображения);
        } elseif ($this->форматИзображения == IMAGETYPE_PNG) {
            header('Content-Type: image/png');
            imagepng($сцылкаНаРесурсИзображения, self::КОРЕНЬ_ИЗОБРАЖЕНИЙ.$this->запрашиваемоеИзображение);
            imagepng($сцылкаНаРесурсИзображения);
        }
    }

    /**
     * Изменение размера изображения
     * @param type $путьКФайлу
     * @param type $ширинаТребуемая
     * @param type $высотаТребуемая
     * @param type $нужнаОбрезка
     * @return type ссылку на изображение
     */
    function режь($путьКФайлу, $ширинаТребуемая, $высотаТребуемая, $нужнаОбрезка = FALSE)
    {

        if (!file_exists($путьКФайлу)){
            return $this->вывестиОшибку(404, "Файл не найден");
        }

        list($ширинаОригинала, $высотаОригинала, $this->форматИзображения) = getimagesize($путьКФайлу);
        $соотношение = $ширинаОригинала / $высотаОригинала;

        if ($высотаТребуемая == 0) {
            $высотаТребуемая = $ширинаТребуемая * $соотношение;
        } elseif ($ширинаТребуемая == 0) {
            $ширинаТребуемая = $высотаТребуемая * $соотношение;
        }

        if ($нужнаОбрезка) {
            if ($ширинаОригинала > $высотаОригинала) {
                $ширинаОригинала = ceil($ширинаОригинала - ($ширинаОригинала * abs($соотношение - $ширинаТребуемая / $высотаТребуемая)));
            } else {
                $высотаОригинала = ceil($высотаОригинала - ($высотаОригинала * abs($соотношение - $ширинаТребуемая / $высотаТребуемая)));
            }
            $ширинаНовая = $ширинаТребуемая;
            $высотаНовая = $высотаТребуемая;
        } else {
            if ($ширинаТребуемая / $высотаТребуемая > $соотношение) {
                $ширинаНовая = $высотаТребуемая * $соотношение;
                $высотаНовая = $высотаТребуемая;
            } else {
                $высотаНовая = $ширинаТребуемая / $соотношение;
                $ширинаНовая = $ширинаТребуемая;
            }
        }

        if ($this->форматИзображения == IMAGETYPE_JPEG) {
            $src = imagecreatefromjpeg($путьКФайлу);
        } elseif ($this->форматИзображения == IMAGETYPE_GIF) {
            $src = imagecreatefromgif($путьКФайлу);
        } elseif ($this->форматИзображения == IMAGETYPE_PNG) {
            $src = imagecreatefrompng($путьКФайлу);
        }

        $dst = imagecreatetruecolor($ширинаНовая, $высотаНовая);
        imagecopyresampled($dst, $src, 0, 0, 0, 0, $ширинаНовая, $высотаНовая, $ширинаОригинала, $высотаОригинала);

        return $dst;
    }

    /**
     * Определение стороны размеры и величину размера
     */
    public function разборПоШаблону()
    {
        preg_match(self::ШАБЛОН_РЕГУЛЯРНОГО_ВЫРАЖЕНИЯ, $this->запрашиваемоеИзображение, $результатРегулярки);
        if (count($результатРегулярки) == 3) {
            $this->сторонаРазмера  = $результатРегулярки[1];
            $this->значениеРазмера = $результатРегулярки[2];

            if (in_array($this->значениеРазмера, self::РАЗРЕШЕНЫЕ_РАЗМЕРЫ)){
                return true;
            }else{
                return $this->вывестиОшибку(403, "Данный размер не входит в диапазон разрешенных");
            }
        } else {
            return $this->вывестиОшибку(412, "Чет херня какая то");
        }
    }

    /**
     * Определение оригинала-источника файла изображения
     */
    public function установкаОригиналаФайла()
    {
        $this->изображениеОригиналФайл = preg_replace(self::ШАБЛОН_РЕГУЛЯРНОГО_ВЫРАЖЕНИЯ, "", $this->запрашиваемоеИзображение);
        //echo $this->изображениеОригиналФайл;
        //exit();
        if (strlen($this->изображениеОригиналФайл) > 0) {
            return true;
        } else {
            return $this->вывестиОшибку(401, "Не смог определить оригинал изображения");
        }
    }

    /**
     * Вывод ошибки и прерывание выполнения
     * @param type $кодОшибки HTTP код
     * @param type $текстОшибки Текст ошибки
     */
    public function вывестиОшибку($кодОшибки, $текстОшибки = "")
    {
        header("HTTP/1.0 {$кодОшибки} {$текстОшибки}");
        echo $текстОшибки;
        die();
    }
}
?>